import java.nio.file.Path
import java.nio.file.Files
import java.io.File

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'maven'
apply plugin: 'jacoco'

version = '0.1.0'

check.dependsOn jacocoTestReport

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

repositories {
    mavenCentral()
} 

project.webAppDirName = "WebContent"

sourceCompatibility=1.8
targetCompatibility=1.8

dependencies {
	compile 'org.yaml:snakeyaml:1.18'
	compile 'org.slf4j:slf4j-api:1.7.+'
  	compile 'org.apache.commons:commons-lang3:3.+'
  	compile 'commons-io:commons-io:2.+'
  	compile 'commons-beanutils:commons-beanutils:1.9.+'
    compile 'org.primefaces:primefaces:6.1'
    compile 'org.primefaces.extensions:primefaces-extensions:6.1.+'
    compile 'org.omnifaces:omnifaces:2.6.2'
      
      
    providedCompile 'javax:javaee-api:7.0'
  	
    testCompile 'junit:junit:4.+'
	testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.apache.logging.log4j:log4j-api:2.6.2'
    testCompile 'org.apache.logging.log4j:log4j-core:2.6.2'
    testCompile 'org.apache.logging.log4j:log4j-slf4j-impl:2.6.2'
}

task createOpenshiftWar(type: War) {
    rootSpec.eachFile { details ->
        if (details.name == "jboss-ds.xml") {
            details.exclude()
        } else if (details.name == "jboss-ds-openshift.xml") {
            details.name = "jboss-ds.xml"
        } else if (details.name == "persistence.xml") {
             details.exclude()
        } else if (details.name == "persistence-openshift.xml") {
            details.name = "persistence.xml"
        }
    }
}

task copyOpenshiftWar(type: Copy, dependsOn: createOpenshiftWar) {
    from('build/libs')
    into('upload')
    include('*.war')
    
    doFirst {
        println "copy war ${war.archiveName} to ${destinationDir}"
    }

}

task deployToOpenshift(type: Exec, dependsOn: copyOpenshiftWar) {
    workingDir 'C:\\Program Files (x86)\\OpenShift'
 
    commandLine 'cmd', '/c', 'oc rsync "' + new File('upload/').getAbsoluteFile() + '" beotracker-3-8vpfp:/wildfly/standalone/deployments'
    
    doFirst {
        File warFile = new File('upload/' + war.archiveName)
        
        String newname = warFile.getParentFile().getAbsolutePath() + '\\beotracker.war'
        println "rename war ${war.archiveName} to " + newname
        
        File newFile = new File(newname);
        if (newFile.exists()) {
            newFile.delete();
        }
        
        warFile.renameTo(newname);
    }
}

war.doLast {
    println 'built WAR: ' + archiveName
}

